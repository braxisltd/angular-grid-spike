task jstest(description: 'runs js unit tests') {
    doLast {
        def testacular = "${new File("node_modules/.bin/testacular.cmd").canonicalPath} start ${new File("config/testacular-gradle.conf.js").canonicalPath}"
        testacular.execute().text
        def testsuites = new XmlSlurper().parse(new File("build/testacular-unit.xml"))
        def errors = testsuites.testsuite.@errors.text().asType(Integer.class)
        def failures = testsuites.testsuite.@failures.text().asType(Integer.class)
        if (errors > 0 || failures > 0) {
            throw new GradleException("Failures: ${failures}, Errors: ${errors}")
        }
    }
}

task scenariotest(description: 'runs js scenario tests') {
    doLast {
        def node = "node ${new File("scripts/web-server.js").canonicalPath}"
        node.execute()
        def testacular = "${new File("node_modules/.bin/testacular.cmd").canonicalPath} start ${new File("config/testacular-gradle.conf.js").canonicalPath}"
        testacular.execute().text
        def testsuites = new XmlSlurper().parse(new File("build/testacular-scenario.xml"))
        def errors = testsuites.testsuite.@errors.text().asType(Integer.class)
        def failures = testsuites.testsuite.@failures.text().asType(Integer.class)
        if (errors > 0 || failures > 0) {
            throw new GradleException("Failures: ${failures}, Errors: ${errors}")
        }
    }
}